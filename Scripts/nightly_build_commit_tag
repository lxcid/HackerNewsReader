#!/usr/bin/env xcrun swift -F Rome

import LXSemVer
import LXXcodeTools

let root: NSString = ".."
let workspace = root.stringByAppendingPathComponent("HackerNewsReader.xcworkspace")
let scheme = "HackerNewsReader"
let target = "HackerNewsReader"

enum InfoPlistKey : String {
	case VersionString = "CFBundleVersionString"
	case ShortVersionString = "CFBundleShortVersionString"
	case NightlyBuildVersionString = "LXNightlyBuildVersionString"
}

if
	let buildSettings = XcodeBuild.BuildSettings(workspace: workspace, scheme: scheme),
	let infoPlistFilePath = buildSettings.valueForKey(.InfoPlistFile, target: target),
	let info = NSMutableDictionary(contentsOfFile: root.stringByAppendingPathComponent(infoPlistFilePath)),
	let versionString = info[InfoPlistKey.ShortVersionString.rawValue] as? String,
	let version = Version(string: versionString)
{
	if let prerelease = version.prerelease?.values.first where prerelease == "nightly" {
		do {
			let task = NSTask()
			task.launchPath = "/usr/bin/git"
			let arguments = [ "commit", "--all", "--message=\(version.description)" ]
			task.arguments = arguments
			
			let pipe = NSPipe()
			task.standardOutput = pipe
			task.launch()
			
			let data = pipe.fileHandleForReading.readDataToEndOfFile()
			var output = NSString(data: data, encoding: NSUTF8StringEncoding)
			print(output)
		}
		
		do {
			let task = NSTask()
			task.launchPath = "/usr/bin/git"
			let arguments = [ "tag", version.description ]
			task.arguments = arguments
			
			let pipe = NSPipe()
			task.standardOutput = pipe
			task.launch()
			
			let data = pipe.fileHandleForReading.readDataToEndOfFile()
			var output = NSString(data: data, encoding: NSUTF8StringEncoding)
		}
		
		do {
			let task = NSTask()
			task.launchPath = "/usr/bin/git"
			let arguments = [ "push", "--set-upstream", "--tags" ]
			task.arguments = arguments
			
			let pipe = NSPipe()
			task.standardOutput = pipe
			task.launch()
			
			let data = pipe.fileHandleForReading.readDataToEndOfFile()
			var output = NSString(data: data, encoding: NSUTF8StringEncoding)
		}
	}
}
